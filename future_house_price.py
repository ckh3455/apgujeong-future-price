import streamlit as st
import pandas as pd
import numpy as np

from datetime import datetime, timedelta

# 데이터프레임 정의
data = {
    '단지명_평형': ['대림빌라트 76평', '대림빌라트 93평', '미성1차 34평', '미성1차 50평', '미성1차 58평', '미성2차 32평', '미성2차 47평', '미성2차 56평', '신현대 35평', '신현대 39평', '신현대 50평', '신현대 51평', '신현대 56평', '신현대 57평', '신현대 60평', '신현대 61평', '아크로빌 81평', '아크로빌 85평', '한양1차 20평', '한양1차 27평', '한양1차 32평', '한양1차 37평', '한양1차 40평', '한양1차 53평', '한양2차 49평', '한양2차 59평', '한양3차 39평', '한양3차 55평', '한양4차 33평', '한양4차 69평', '한양5차 32평', '한양5차 40평', '한양5차 43평', '한양5차 54평', '한양6차 35평', '한양6차 53평', '한양7차 35평', '한양7차 46평', '한양8차 64평', '한양8차 66평', '한양8차 69평', '현대1,2차 43평', '현대1,2차 53평', '현대1,2차 54평', '현대1,2차 65평', '현대10차 35평', '현대10차 50평', '현대13차 36평', '현대14차 32평', '현대3차 33평', '현대4차 44평', '현대5차 35평', '현대6,7차 48평', '현대6,7차 52평', '현대6,7차 65평', '현대6,7차 80평', '현대8차 35평', '현대8차 54평', '현대빌라트 73평'],
    2015: [np.nan, np.nan, 130000.0, 197000.0, 210000.0, 117000.0, 163000.0, 178000.0, 153000.0, 166600.0, 237000.0, 224000.0, 230000.0, 240000.0, 245000.0, 267000.0, np.nan, 348000.0, 89900.0, 110000.0, 132500.0, 142500.0, np.nan, np.nan, 203000.0, 235000.0, 160000.0, 202000.0, 135000.0, 259000.0, 133000.0, 165000.0, np.nan, 238000.0, 142000.0, 197500.0, 148000.0, 191000.0, 210000.0, np.nan, 295000.0, 165500.0, 225000.0, 210000.0, 290000.0, 142000.0, np.nan, 155000.0, 150000.0, 129000.0, 212000.0, 148500.0, 220000.0, 236500.0, 299000.0, 405000.0, 134000.0, 179000.0, np.nan],
    2016: [np.nan, np.nan, 160000.0, 254000.0, 263000.0, 150000.0, 170000.0, 193000.0, 193500.0, 180000.0, 290000.0, 248500.0, 285000.0, 257000.0, 260000.0, 312000.0, np.nan, 380000.0, 101000.0, 141000.0, 160000.0, 143500.0, np.nan, 153000.0, 250000.0, 275000.0, 187800.0, 235000.0, 160000.0, 305000.0, 147500.0, 195500.0, np.nan, 258000.0, 172500.0, 221500.0, 170000.0, 250000.0, np.nan, np.nan, 275000.0, 210000.0, 280000.0, 228000.0, 330000.0, 160000.0, np.nan, 198000.0, 185000.0, 170000.0, 255000.0, 188500.0, 250000.0, 280000.0, 309000.0, 430000.0, 170000.0, 273000.0, np.nan],
    2017: [282000.0, np.nan, 195000.0, 280000.0, np.nan, 167000.0, 240000.0, 257000.0, 237000.0, 248000.0, np.nan, 290000.0, 319000.0, 317000.0, 370000.0, 368300.0, np.nan, 361350.0, 148000.0, 172000.0, 198000.0, 188500.0, np.nan, 215000.0, 275000.0, 300000.0, 200000.0, 264000.0, 188000.0, 320000.0, 215000.0, 230000.0, 209000.0, 270000.0, 189000.0, 235000.0, 220000.0, 269000.0, 383000.0, np.nan, 395000.0, 277500.0, 310000.0, 310000.0, 439900.0, 197000.0, 277000.0, 260000.0, 214000.0, 190000.0, 340000.0, 240000.0, 280000.0, 310000.0, 405000.0, np.nan, 215000.0, 280000.0, np.nan],
    2018: [348500.0, np.nan, np.nan, np.nan, np.nan, 187000.0, 250000.0, 271000.0, 267000.0, np.nan, 340000.0, 350000.0, np.nan, np.nan, np.nan, 390000.0, np.nan, np.nan, 160000.0, 195000.0, 220000.0, 225000.0, np.nan, 245000.0, 313000.0, 330000.0, np.nan, 316500.0, 250000.0, np.nan, 235000.0, 265000.0, np.nan, np.nan, 235000.0, np.nan, 249000.0, 300000.0, np.nan, 400000.0, np.nan, 295000.0, 358000.0, 330000.0, 450000.0, 239000.0, 355000.0, 280000.0, 260000.0, 235000.0, 350000.0, 239500.0, 310000.0, 370000.0, 438000.0, 525000.0, 233000.0, 305000.0, 385000.0],
    2019: [np.nan, 450000.0, 248000.0, 350000.0, 345000.0, 212000.0, 283000.0, 299000.0, 290000.0, 303000.0, 390000.0, 390000.0, 420000.0, 370000.0, 390000.0, 430000.0, np.nan, 489000.0, 185000.0, 198000.0, 225000.0, 248000.0, np.nan, np.nan, 340000.0, 364000.0, 270000.0, 360000.0, 235000.0, 340000.0, 244000.0, 269700.0, np.nan, 333000.0, 248000.0, 329000.0, 250000.0, 325000.0, np.nan, np.nan, 438000.0, 326000.0, 390000.0, 378000.0, 470000.0, 270000.0, 370000.0, 289500.0, 267000.0, 240000.0, 375000.0, 280000.0, 370000.0, 393000.0, 478000.0, 520000.0, 253000.0, 330000.0, np.nan],
    2020: [np.nan, np.nan, 265000.0, 357500.0, 320000.0, 235000.0, 299500.0, 338000.0, 300000.0, 315000.0, 439000.0, 438000.0, 420000.0, 445000.0, 450000.0, 520000.0, np.nan, np.nan, 185000.0, 220000.0, 240000.0, 263000.0, np.nan, np.nan, 379000.0, 442500.0, 290000.0, 355000.0, 243000.0, np.nan, 249000.0, 312000.0, np.nan, 340000.0, 252000.0, 350000.0, 270000.0, 339000.0, np.nan, 540000.0, 480000.0, 350000.0, 430000.0, 410000.0, 527000.0, 283000.0, 370000.0, 304500.0, 300000.0, 249500.0, 360000.0, 297000.0, 400000.0, 430000.0, 520000.0, 670000.0, 275000.0, 312500.0, 365000.0],
    2021: [np.nan, np.nan, 330000.0, 420000.0, 530000.0, 305000.0, 345000.0, 410000.0, 360000.0, np.nan, 498000.0, 550000.0, 450000.0, 604500.0, 575000.0, 500000.0, np.nan, np.nan, 215000.0, 279000.0, 300000.0, 359000.0, np.nan, 350000.0, 447000.0, 450000.0, 405000.0, np.nan, 350000.0, 527000.0, 289000.0, 267500.0, np.nan, 437000.0, 350000.0, np.nan, 380000.0, np.nan, np.nan, np.nan, 720000.0, 400000.0, 602000.0, 537000.0, 640000.0, 319000.0, np.nan, 370000.0, 340000.0, 360000.0, 417500.0, 350000.0, 455000.0, 500000.0, 628000.0, 800000.0, 368000.0, 487000.0, np.nan],
    2022: [np.nan, np.nan, np.nan, np.nan, np.nan, 321000.0, np.nan, 470000.0, np.nan, np.nan, np.nan, 590000.0, np.nan, np.nan, np.nan, 595000.0, np.nan, np.nan, 243000.0, 307000.0, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 370000.0, np.nan, 268000.0, np.nan, np.nan, np.nan, np.nan, 455500.0, 398000.0, 497000.0, np.nan, np.nan, np.nan, 476500.0, np.nan, np.nan, 800000.0, np.nan, np.nan, np.nan, 430000.0, 420000.0, np.nan, 410000.0, 500000.0, 580000.0, np.nan, np.nan, 390000.0, np.nan, np.nan],
    2023: [np.nan, np.nan, np.nan, 530000.0, 525000.0, 300000.0, 395000.0, 445000.0, 440000.0, np.nan, np.nan, 615000.0, 620000.0, 605000.0, 608000.0, 695000.0, np.nan, np.nan, 250000.0, 318000.0, 350000.0, 360000.0, np.nan, 390000.0, 530000.0, 540000.0, 417000.0, 530000.0, 325000.0, 640000.0, 315000.0, 395000.0, np.nan, 540000.0, 371000.0, np.nan, 318000.0, np.nan, np.nan, np.nan, np.nan, 405000.0, 650000.0, 545000.0, 780000.0, 410000.0, np.nan, 370000.0, 376000.0, 390000.0, 538000.0, np.nan, 515000.0, 580000.0, 685000.0, np.nan, 389000.0, 540000.0, 660000.0],
    2024: [np.nan, np.nan, 380000.0, 550000.0, 500000.0, 340000.0, 450000.0, 525000.0, 510000.0, 480000.0, 710000.0, 715000.0, 705000.0, 730000.0, 750000.0, 860000.0, np.nan, np.nan, 257000.0, 388000.0, 400000.0, 450000.0, np.nan, np.nan, np.nan, 645000.0, 465000.0, 500000.0, 425000.0, 710000.0, 370000.0, 400000.0, np.nan, 570000.0, 390000.0, 530000.0, 400000.0, 540000.0, np.nan, np.nan, 835000.0, 549000.0, 730000.0, 678000.0, 900000.0, 460000.0, 655000.0, 500000.0, 470000.0, 430000.0, 610000.0, 480000.0, 648000.0, 670000.0, 795000.0, 1150000.0, 445000.0, 645000.0, 660000.0],
}

df = pd.DataFrame(data)

st.set_page_config(layout="wide")
st.title("🏠 압구정동 단지별 목표 금액 도달 예상일 계산기")

# 📢 중개업소 홍보
st.markdown("### 📢 압구정 원 부동산중개")
st.markdown("📱 02-540-3334  \n👤 최규호 이사")

# 📘 사용법
st.markdown("### 📘 사용법")
st.markdown("1️⃣ 단지 선택은 아래 드롭다운에서 선택  \n"
            "2️⃣ 신고가 입력일자, 금액 입력 (억 단위)  \n"
            "3️⃣ 목표 금액 입력 (억 단위)  \n"
            "4️⃣ [확인] 버튼 클릭")

# 📥 입력창
단지목록 = df['단지명_평형'].unique()
selected_complex = st.selectbox("🏢 단지 선택", 단지목록)
신고가_일자 = st.date_input("📅 신고가 입력일자", datetime.today())
신고가_금액 = st.text_input("💰 신고가 금액 (억)", value="")
목표_금액 = st.text_input("🎯 목표 금액 (억)", value="")

# 🖱️ 확인 버튼
if st.button("✅ 확인"):
    selected_data = df[df['단지명_평형'] == selected_complex]
    연도_리스트 = [str(y) for y in range(2015, 2025)]

    if not selected_data.empty:
        상승률_리스트 = []
        for i in range(len(연도_리스트)-1):
            y1, y2 = int(연도_리스트[i]), int(연도_리스트[i+1])
            v1, v2 = selected_data.iloc[0][y1], selected_data.iloc[0][y2]
            if pd.notnull(v1) and pd.notnull(v2) and v1 > 0:
                상승률_리스트.append((v2 - v1) / v1)
        if 상승률_리스트:
            연평균_상승률 = sum(상승률_리스트) / len(상승률_리스트)
            st.markdown(f"📈 **선택 단지: {selected_complex}**  \n"
                        f"📈 **2015~2024 연평균 상승률: {연평균_상승률 * 100:.2f}%**")
            if 신고가_금액.strip() and 목표_금액.strip():
                try:
                    신고가_금액, 목표_금액 = float(신고가_금액), float(목표_금액)
                    if 신고가_금액 > 0 and 목표_금액 > 신고가_금액:
                        신고가_만원, 목표_만원 = 신고가_금액 * 10000, 목표_금액 * 10000
                        년수_예상 = np.log(목표_만원 / 신고가_만원) / np.log(1 + 연평균_상승률)
                        예상_도달일 = 신고가_일자 + timedelta(days=int(년수_예상 * 365))
                        fmt = lambda x: f"{x:.1f}" if x % 1 != 0 else f"{int(x)}"
                        st.success(f"🎯 **예상 도달일**: {예상_도달일.year}-{예상_도달일.month}-{예상_도달일.day}  \n"
                                   f"💰 신고가: {fmt(신고가_금액)}억 → 목표: {fmt(목표_금액)}억  \n"
                                   f"📈 연평균 상승률: {연평균_상승률 * 100:.2f}%")
                    else:
                        st.warning("🚨 목표 금액은 신고가보다 높아야 하고 신고가는 0보다 커야 합니다.")
                except ValueError:
                    st.warning("🚨 금액 입력은 숫자로 입력하세요.")
            else:
                st.info("💬 신고가 입력일자, 금액, 목표 금액을 입력하세요.")
        else:
            st.warning("📉 선택 단지의 상승률 데이터 부족")
    else:
        st.warning("🚨 선택한 단지의 데이터가 없습니다.")